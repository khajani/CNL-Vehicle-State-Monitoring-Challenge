// -------------------- GLOBAL LIBRARIES --------------------
#include <WiFiS3.h>      // REQUIRED for Arduino Uno R4 WiFi networking
#include <ThingSpeak.h>  // REQUIRED for ThingSpeak functions
#include <Adafruit_LIS3MDL.h> // Magnetometer Library
#include <Adafruit_Sensor.h>  // Unified Sensor Library
#include <Wire.h>        // REQUIRED for I2C (LCD and Mag)
#include <rgb_lcd.h>     // REQUIRED for LCD

// -------------------- 1. YOUR PRIVATE CREDENTIALS --------------------
char ssid[] = "Kj’s iPhone"; 
char pass[] = "1236393639";

// ThingSpeak Channel and API Key
unsigned long myChannelNumber = 3100192;
const char * myWriteAPIKey = "BAOHBAPAYCW24D6P"; 
const float DECLINATION_ANGLE = 12.5; // <<-- IMPORTANT: CHANGE THIS TO YOUR LOCATION'S VALUE!

// -------------------- 2. GLOBAL VARIABLES --------------------
WiFiClient client;
int status = WL_IDLE_STATUS;

// SENSOR OBJECTS
Adafruit_LIS3MDL lis3mdl; // Magnetometer object
rgb_lcd lcd;               // LCD object

// LCD STATE VARIABLES
struct TestState {
  const char* anomaly;     // Anomaly type (MAX 16 CHARS)
  const char* instruction; // Actionable instruction (MAX 16 CHARS)
};

// **TEXT IS GUARANTEED TO BE 16 CHARACTERS OR LESS**
TestState states[] = {
  // State 0: Initializing (Blue)
  {"--NODE INIT DONE--", "LOADING DECISIONS"}, 
  // State 1: Radiation Leak Instruction (Red)
  {"RAD. LEAK! STOP!", "SHELTER ASAP"}, 
  // State 2: Fire/Overheat Instruction (Red)
  {"FIRE! CONTAIN!", "PULL OVER"},
  // State 3: Crash/Impact Instruction (Red)
  {"CRASH! DANGER!", "STOP, CALL CNL"},
  // State 4: Load Shift/Other Generic Warning (Red)
  {"LOAD SHIFTED", "STOP INSPECT"},
  // State 5: NOMINAL (Green)
  {"SYSTEM NEUTRAL", "ALL SYSTEMS OK"},
};

const int numStates = sizeof(states) / sizeof(states[0]);
int currentState = 0; // Starts in State 0 (Initializing)
unsigned long lcdFlashTime;
const int flashRate = 200; // milliseconds for the LCD flash cycle


// -------------------- FUNCTION: connectToWiFi --------------------
void connectToWiFi() {
  if (WiFi.status() == WL_NO_MODULE) {
    Serial.println("Communication with WiFi module failed! Halting.");
    // Display error on LCD
    lcd.setRGB(255, 0, 0); 
    lcd.home(); lcd.print("WIFI MODULE FAIL");
    while (true); 
  }

  while (status != WL_CONNECTED) {
    Serial.print("Attempting to connect to SSID: ");
    Serial.println(ssid);
    
    // Display connection attempt on LCD
    lcd.setRGB(100, 100, 255); // Blue
    lcd.home(); lcd.print("CONNECTING WIFI");
    lcd.setCursor(0, 1); lcd.print(ssid);

    status = WiFi.begin(ssid, pass);
    delay(10000);
  }

  // Connection successful
  Serial.println("\n✅ Connected to WiFi!");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());
}

// -------------------- SETUP FUNCTION --------------------
void setup() {
  // Update Serial Baud to match Wi-Fi/ThingSpeak
  Serial.begin(115200); 
  delay(100);

  // --- LCD SETUP ---
  lcd.begin(16, 2);
  
  // Display initial state 0 (Initializing)
  lcd.setRGB(100, 100, 255); // Blue
  lcd.home(); lcd.print(states[0].anomaly);
  lcd.setCursor(0, 1); lcd.print(states[0].instruction);

  // --- WIFI/THINGSPEAK SETUP ---
  connectToWiFi();
  ThingSpeak.begin(client);

  // --- MAGNETOMETER SETUP ---
  Serial.print("Initializing LIS3MDL...");
  if (!lis3mdl.begin_I2C()) {
    Serial.println("...FAILED! Check wiring/address. Halting.");
    lcd.setRGB(255, 0, 0); lcd.home(); lcd.print("MAG INIT FAILED!");
    while (1) delay(10);
  }
  lis3mdl.setOperationMode(LIS3MDL_MEDIUMMODE);
  Serial.println("...SUCCESS!");

  // Transition from State 0 (Init) to State 5 (Nominal) after successful setup
  currentState = 5; 
}

// -------------------- MAIN LOOP FUNCTION --------------------
void loop() {
  unsigned long currentTime = millis();
  
  // Check Wi-Fi connection and attempt to reconnect if needed
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("Lost WiFi connection. Reconnecting...");
    connectToWiFi();
  }
  
  // -------------------- A. SENSOR READS --------------------
  sensors_event_t event;
  lis3mdl.getEvent(&event);
  
  // --- RAW MAGNETOMETER DATA ---
  float mag_x = event.magnetic.x; // Value for Field 6
  float mag_y = event.magnetic.y; // Value for Field 7
  
  // --- TRUE HEADING CALCULATION (for Field 8) ---
  float raw_heading = atan2(mag_y, mag_x) * 180.0 / PI;
  float true_heading = raw_heading + DECLINATION_ANGLE;
  if (true_heading < 0) {
    true_heading += 360;
  }

  // -------------------- B. STATE DETERMINATION (You will replace this) --------------------
  // IMPORTANT: For now, the state is fixed at 5 (NOMINAL) after setup.
  // You will replace this section with your logic based on gForce, temp, etc.
  // Example: if (gForce > 2.0) { currentState = 3; }
  // You might change currentState from 5 to 1, 2, 3, or 4 based on sensor data.
  // We keep it at 5 for this test.
  if (currentState > 5) {
    currentState = 5; 
  }

  // -------------------- C. LCD DISPLAY LOGIC --------------------
  TestState current = states[currentState];

  // If NOT NOMINAL (State 1 through 4) - Flashing RED
  if (currentState >= 1 && currentState <= 4) {
    if (currentTime % flashRate < (flashRate / 2)) {  
        lcd.setRGB(255, 0, 0); // Red
    } else {
        lcd.setRGB(0, 0, 0); // Off 
    }
  } 
  // If NOMINAL (State 5) - Fixed GREEN
  else if (currentState == 5) {
    lcd.setRGB(0, 255, 0); // Green
  }
  
  // Always update the display content
  lcd.home();
  lcd.print(current.anomaly);
  lcd.setCursor(0, 1);
  lcd.print(current.instruction);
  
  // -------------------- D. THINGSPEAK SEND --------------------
  
  // --- MAIN PROJECT FIELDS (Sending 0 for now) ---
  float score = 0;          // Field 1
  float gForce = 0;         // Field 2
  float temperature = 0;    // Field 3
  float latitude = 0;       // Field 4
  float longitude = 0;      // Field 5

  // --- SET UP FIELDS ---
  ThingSpeak.setField(1, score);
  ThingSpeak.setField(2, gForce);
  ThingSpeak.setField(3, temperature);
  ThingSpeak.setField(4, latitude);
  ThingSpeak.setField(5, longitude);
  
  // MAGNETOMETER AND HEADING FIELDS
  ThingSpeak.setField(6, mag_x);
  ThingSpeak.setField(7, mag_y);
  ThingSpeak.setField(8, true_heading); // Field 8 now sends True Heading
  
  // --- Print to Serial ---
  Serial.println("\n--- Sensor Readings ---");
  Serial.print("Current State: "); Serial.println(currentState);
  Serial.print("F6 (Mag X): "); Serial.println(mag_x);
  Serial.print("F7 (Mag Y): "); Serial.println(mag_y);
  Serial.print("F8 (Heading): "); Serial.println(true_heading);
  
  // --- WRITE DATA TO THINGSPEAK ---
  int http_response_code = ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey);

  if (http_response_code == 200) {
    Serial.println("✅ Data sent successfully! (HTTP 200)");
  } else {
    Serial.print("❌ Problem updating channel. HTTP error code: ");
    Serial.println(http_response_code);
  }

  delay(20000); 
}
